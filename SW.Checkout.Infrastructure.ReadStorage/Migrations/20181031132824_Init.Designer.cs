// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SW.Checkout.Infrastructure.ReadStorage.Database;

namespace SW.Checkout.Infrastructure.ReadStorage.Migrations
{
    [DbContext(typeof(SwStoreReadDbContext))]
    [Migration("20181031132824_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SW.Checkout.Read.ReadView.OrderLineReadView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("order_line_read_view");
                });

            modelBuilder.Entity("SW.Checkout.Read.ReadView.OrderReadView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("order_read_view");
                });

            modelBuilder.Entity("SW.Checkout.Read.ReadView.WarehouseItemReadView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("warehouse_item_read_view");
                });

            modelBuilder.Entity("SW.Checkout.Read.ReadView.WarehouseReadView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("warehouse_read_view");
                });

            modelBuilder.Entity("SW.Checkout.Read.ReadView.OrderLineReadView", b =>
                {
                    b.HasOne("SW.Checkout.Read.ReadView.OrderReadView", "Order")
                        .WithMany("Lines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SW.Checkout.Read.ReadView.WarehouseItemReadView", b =>
                {
                    b.HasOne("SW.Checkout.Read.ReadView.WarehouseReadView", "Warehouse")
                        .WithMany("Items")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
