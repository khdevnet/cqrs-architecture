// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SW.Store.Checkout.Infrastructure.SQL.Database;

namespace SW.Store.Checkout.Infrastructure.SQL.Migrations
{
    [DbContext(typeof(SwStoreDbContext))]
    [Migration("20180929213449_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SW.Store.Checkout.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ShippingAddress");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new { Id = 1, Name = "Han Solo", ShippingAddress = "Stars" }
                    );
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LineStatus");

                    b.Property<Guid>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int?>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, Name = "R2-D2" },
                        new { Id = 2, Name = "Speeder" },
                        new { Id = 3, Name = "BB-8" },
                        new { Id = 4, Name = "Blaster" },
                        new { Id = 5, Name = "Death star" }
                    );
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new { Id = 1, Name = "Naboo" },
                        new { Id = 2, Name = "Tatooine" }
                    );
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.WarehouseItem", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("WarehouseId");

                    b.Property<int>("Quantity");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseItems");

                    b.HasData(
                        new { ProductId = 1, WarehouseId = 1, Quantity = 5000 },
                        new { ProductId = 2, WarehouseId = 1, Quantity = 5000 },
                        new { ProductId = 3, WarehouseId = 1, Quantity = 5000 },
                        new { ProductId = 4, WarehouseId = 1, Quantity = 5000 },
                        new { ProductId = 5, WarehouseId = 1, Quantity = 5000 },
                        new { ProductId = 1, WarehouseId = 2, Quantity = 5000 },
                        new { ProductId = 2, WarehouseId = 2, Quantity = 5000 },
                        new { ProductId = 3, WarehouseId = 2, Quantity = 5000 },
                        new { ProductId = 4, WarehouseId = 2, Quantity = 5000 },
                        new { ProductId = 5, WarehouseId = 2, Quantity = 5000 }
                    );
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.Order", b =>
                {
                    b.HasOne("SW.Store.Checkout.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.OrderLine", b =>
                {
                    b.HasOne("SW.Store.Checkout.Domain.Order", "Order")
                        .WithMany("Lines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SW.Store.Checkout.Domain.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SW.Store.Checkout.Domain.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("SW.Store.Checkout.Domain.WarehouseItem", b =>
                {
                    b.HasOne("SW.Store.Checkout.Domain.Product", "Product")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SW.Store.Checkout.Domain.Warehouse", "Warehouse")
                        .WithMany("Items")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
